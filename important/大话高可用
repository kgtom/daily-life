
一个系统不是一下子就能设计的非常完美，在有限资源情况下，一定要先解决当下最核心的问题，预测未来的问题，迭代推进。
一句话：对现有问题有方案，对未来架构有预案。

高可用方式：
缓存：抗流量的银弹
降级：对抗高并发流量，通过配置、同步改异步、暂时停掉非核心功能，保证核心功能
限流：秒杀、抢购、恶意请求，使用令牌桶算法、计数器
可回滚：事务、代码、数据库回滚
隔离：故障隔离
超时与重试：设置合理的超时时间和重试次数
压测：whr 




总结： 别人死我们不死，自己不作死，不被队友搞死。


1.别人死我们不死：无依赖，
要是有依赖就去依赖，去不了，就弱依赖，如果要强依赖，那就容灾。
容灾：别人死了，我们快速失败，安全提示，
    别人活了，快速恢复：心跳检查 或者 事件监听
需要设置合理超时和重试、蓄洪、限流、熔断、降级


2.自己不作死：
不作：不当小白鼠，用成熟的技术；规范研发流程、做好测试和演练
不死：单个节点挂了，用集群；单个机房挂了，用多机房；整个地区网断，用多机房；即：异地多活
涉及到集群和跨区的要有策略：负载均衡、主从切换，优先策略

阿里异地多活三个阶段：同城多活--异地只读和冷备--异地多活

3.不被队友搞死：
队友：部门内部依赖关系
需要明确边界，做到队友死自己不死。


一句话：研发规范、自身稳定、容错下游、防御上游。




reference:
https://www.cnblogs.com/xiexj/p/8495148.html
