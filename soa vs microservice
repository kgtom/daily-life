在两者出现之前是：单体应用，随着业务增加，不能满足需求，尤其是在代码维护、因为耦合度高，牵一发动全身，可扩展性不友好，所以逐渐 SOA和微服务出现了。
第一 两者比较
SOA：解决是企业高层业务领域的整合问题，例如： ERP、CRM、HR 系统通过ESB总线整合。

微服务：是SOA 一种实现。解决是企业下层具体业务的架构设计。
    优点：解决单体应用面临的问题，拆分业务系统，确定业务边界，组件化和服务化，API网卡类似于SOA的ESB企业总线，负责统一后台api入口、安全、路由过滤。
    缺点：分布式事务问题(CAP原则)及部署众多服务
    CAP理论的核心：一个分布式系统不可能同时很好的满足（Consistency一致性，Availability可用性和Partition tolerance分区容错性）这三个需求，最多只能同时较好的满足两个.
    通过 k8s(Rancher)+docker方式去做部署及服务发现、负载


第二如何拆分？
 1.why要拆分(拆分需求)？ 
 业务发生变化，新增新的业务，技术团队人员拆分；某个功能，一旦改变影响范围很大，需要拆分出来，单独做。
 2.拆分原则及方法？
 业务优先，兼顾技术；拆分不仅是业务梳理的过程，也是一种代码重构的过程，本着“高内聚、低耦合”(解耦)
 数据库拆分，明确业务边界，proxy-facade模式让代码更清晰，公共功能模块抽离；各服务之间通过 NSQ、GRPC通信。
 例如：订单模块，所有访问订单模块的数据，通过facade模式,隐藏实现细节，提供API，保证业务高内聚
               订单模块访问其它模块数据，通过proxy模式，不直接使用订单对象，保证业务低耦合
               
第三 如何解决分布式事务？（不用分布式事务之前，让 下单和库存两者放在一个db中，使用本地事务。）

  1.两阶段提交协议----实现分布式事务强一致性

分两种阶段：准备阶段、提交阶段
参与角色：协调者和参与者1...n

优点：实现强一致性
缺点：
堵塞：必须接到指令才能执行下一步，否则处于堵塞状态
单点故障：遇到故障，一直堵塞，锁定资源

总结：保持数据的强一致性，但出现异常，都需要人工干预处理，因此可用性不够好。
符合cap协议的一致性和可用性不得兼得的原理。

2.三阶段提交协议
分三个阶段：
询问阶段:是否可以完成指令
准备阶段：是否所有参与者都可以返回执行操作
提交阶段:预留每一个参与者都操作成功和失败的方法
参与角色：协调者和参与者1...n

优点：比两阶段提交多了一个询问阶段，尽早发现无法执行操作终止的行为。
缺点：实现复杂

3. TCC协议
   两阶段需要人工处理；三阶段较复杂，在高并发场景下不常使用。基于此阿里巴巴推出TCC模式，Try、Confirm、Cancel，先执行try，要是没有问题执行confirm，有问题执行逆操作Cancel.

TCC模式：逻辑是简化版的三阶段提交，解决了两阶段提交的堵塞问题，但没有解决极端情况下的出现不一致问题(例如执行Cancel指令，有些参与者收到并执行了，有些没有收到)，所以通过事后补偿方式处理，尝试自动修复，如果无法自动修复的需要人工参与。

TCC 典型案例：秒杀场景。查询缓存库存、锁定库存、支付失败或超时、系统自动释放之前锁定的库存。
其它场景：转账、下单和减少库存问题等


总结三种协议都能保持数据的一致性，一致性从强到弱。在实际场景下，有时候不需要专业的、复杂的一致性，而是一些简单粗暴行之有效的模式。

1.查询模式

场景：同步数据、同步超时、异步回调超时、各系统状态的不一致
使用查询模式了解被调用服务的处理情况，来决定下一步操作；是补偿未完成的还是回滚已完成的。

2.补偿模式
分系统自动回复和通知运营线下处理

3.异步模式
电商系统中物流、配送； erp订单和财务结算对账

使用消息系统(nsq、mq等)
   订单系统A表和记录发送给M的D表---》 消息系统M  ---》 财务系统B表 和记录已处理的订单C表(两者一个事务)
   
讲解：A下单成功后，D表中存储一笔发送记录待发送，向M存储一笔信息，向M发送成功后，改变D表状态 发送成功，该消息通知B有一条结算数据，通知B之前，
      先检查一下C中是否已经处理了过这个订单A的数量，如果没有处理，则处理B并且在C中加一笔数据，B和C一个事务中。
      A下单成功后，如果存储M失败，则定时从D表中获取待发送的消息存储到M.
4. 同步模式
  例如：支付完成后，增加客人的常旅客积分。保证业务数据的实时性和一致性，支付成功后必须加积分，我们让常旅客模块提供新增积分和积分回撤功能。
       具体流程：先增加积分，积分成功后，再调用支付，如果支付失败，则调用积分回撤的API。

 5.定时校对，然后进行补偿
    使用消息队列nsq，需要保证nsq是否成功接收，定时校对，然后再执行存储。
    
     







       
reference：
https://www.zhihu.com/question/37808426
github.com/hyperledger/fabric/core/chaincode/shim
https://blog.csdn.net/kangbin825/article/details/71006546?locationNum=7&fps=1
               
 


