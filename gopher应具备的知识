reference：
http://blog.csdn.net/pg_roger/article/details/22066025
https://www.zhihu.com/question/67846139?utm_source=wechat_session&utm_medium=social
http://blog.csdn.net/nszkadrgg/article/details/8471679
https://www.zhihu.com/question/39324847

具备的知识分类：
1.通用问题
2.开放式问题
3.设计模式
4.代码相关
5.语言相关
6.web相关
7.数据库相关
8.并发问题
9.分布式问题
10.软件生命周期和团队管理
11.逻辑和算法
12.软件架构（SOA、微服务）
13.安全相关问题

第一通用问题：
1.面向对象编程 vs 函数式编程区别？
  OOP:以对象为中心；函数式对象，用于逻辑处理，符合人认知方式和思考方式：函数是第一公民；语法简洁，多用于数据处理
2.微软、谷歌、欧朋(opera)和火狐这类公司是如何从他们的浏览器中获利的？
浏览器是一个流量入口为网站/搜索引擎；广告；推送服务；推荐软件安装
3.语言设计中空引用(null reference)的存在有什么问题？假设你想要将空引用的概念从你的首选语言中移除，可能导致什么结果？
 比如c#语言，导致未将对象引用为对象实例，Golang:初始化默认的值；如果移除，默认值是一个需要考虑的问题
4.为什么打开TCP套接字有很大的开销？
三次握手，四次挥手；每次一个客户端连接，都要fork一个进程
5. 封装的重要性体现在哪儿？
 在面向对象编程中，对内部成员变量、函数一种信息隐藏，“高内聚”体现，于其它模块隔离；在编写函数、方法、API是，封装利于可复用性
6.什么是实时系统？它与普通系统有什么区别？
 实时操作系统：对外部请求及时响应，响应时间是最重要的指标，例如 vsWorks, 军工、航天工业上应用、汽车安全气囊、导弹发射器，
 非实时操作系统：目前用的Linux Windows 
7.实时语言和堆内存分配之间的关系是什么？
  堆:程序员 new/make 分配并手动回收或者GC回收，栈：局部变量、参数使用，先进后出。
8.什么是O/R阻抗失衡,与ORMapping关系？
 ORM:面向对象描述业务，关系型数控管理数据的存储，面向对象的对象模型和关系型数据库的数据结构之间的相互转换。
 O/R阻抗失衡(O/R Impedance Mismatch)：指的是OO对象模型和关系型数据库的数据结构之间的，设计理念上的差异。
 OO专家认为业务是最重要的，数据服务与业务。遵循SOLID原则
 数据库专家认为数据是一个公司财富，保证数据的稳定性。
 最终：两者需要相辅相成，oo 常规使用一对一，一对多关心 去映射db.
 9.缓存的使用场景及注意事项？
 根据业务特点，明确容易变，哪些不容易变，即：读多写少的应用场景。
 更新缓存还是删除缓存，取决于业务的复杂度，如果获取用户常旅客信息，两者都很简单。
 执行写操作：先淘汰缓存，再写数据库，原因：减少对业务的影响为原则。
 缓存架构设计：常规做法，api 接入，先访问cache，再访问db;另一种做法：写走db,读走cache，db和cache做异步同步。
 10.TCP/IP和HTTP有什么区别？
 http 应用层，负责用户UI，依赖于tcp传输层，保证数据可靠有序的传输，tcp依赖于ip,ip网络地址，提供端到端的传输
 11.在客户端渲染(client-side rendering)和服务端渲染(server-side rendering)之间，你是如何权衡的？
    前端渲染：后端返回json,前端加载css\js ,渲染模板，加载相对后端渲染慢，SEO差，编码效率高，前后端各司其职。
    后端渲染：后端直接生成html,前端显示，加载速度快，SEO效果好,前后端代码混合，可维护性不好，占有服务端资源
    自己选择：根据业务，需要快速响应，不涉及页面交互的，后端来做，其它交给前端。
12.如何在一个不可靠的协议之上构建一个可靠的通信协议？
 必须保证接收方的应用收到了完整且正确的数据，这种服务就是可靠数据传输服务。
 tcp协议:TCP是一种面向连接的、可靠的、基于字节流的运输层（Transport layer）通信协议。
   三次握手最大程度上保证了连接的可靠性，通过数据校验保证发送和接收到的数据是有序的，一致的，四次挥手关闭连接。
 udp协议：无连接的协议。不保证传输数据的可靠性，、单向推送、不可靠、，最大的优点传输快，应用包括TFTP ,  SNMP , DNS ,DHCP等。
 
 TCP如何提供可靠性，表现在以下几个方面：
 
在传输过程中，通信双方的协议模块继续进行通信，从而确保了传输的可靠性。
针对乱序：在通过三次握手进行链接时，序列号被初始化，表示哪些数据传输哪些数据没有传输。
针对丢包：在传输过程中，接收方收到一个数据段后，会用ACK应答码向发送端回复一个IP包进行应答是否接收。
针对重复：接收端收到数据段后，查看序列号，如果已经成功接收改数据包，则丢弃后面这个数据段。
针对延时：延时造成的第一个问题，就是数据包达到接收端时乱序。


TCP中，序列号和ACK应答号有哪些作用？

依靠序列号重组数据段
依靠数据包消除网络中的重复包
依靠序列号和应答号进行差错重传，提高了TCP的可靠性
当延时严重时，接收端一直未收到数据段，则不会回复ACK，发送端认为丢包，重发。
 
 


