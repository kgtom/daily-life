

无论是在单机系统还是分布式系统当中，调度器其实都是非常核心和普遍的组件，其内涵比较宽广，也比较模糊。

一般来说，下面提到的几种类型的模块都可以认为是调度器：

早期计算机系统当中的批处理调度系统；

现代计算机系统当中的抢占式进程调度系统和内存分配系统；

某些系统或程序提供或实现的，定时激发某些类型操作的工具（如 crontab、Quartz 等）；

某些编程语言的 Runtime 提供的线程/纤程/协程调度器（如 Golang 内置的Goroutine 调度器）；

分布式系统当中的任务关系管理和调度执行系统，（如 Hadoop YARN， Airflow 等）；

分布式系统当中的资源管理和调度系统（如 Mesos、Borg、Kubernetes 的调度器等）。


案例1: 协程调度器

单机操作系统的单个进程为了避免系统级多线程上下文切换的成本，可以自行实现进程内的调度器，如 Golang 运行时的 Goroutine 调度器。在这一模型下，一个进程内部的资源就相当于一个分区，分区内的资源由运行时提供的调度器预先申请并自行管理。运行时环境只有当资源耗尽时才会向系统请求新的资源，从而避免频繁的系统调用。

提出这个例子，主要目的在于说明类似的优化思路其实也被应用于分布式系统，再次证明了系统设计分层重复的特点！



reference:
https://mp.weixin.qq.com/s/MJwJTKXX41Dy-stlVElBDQ
